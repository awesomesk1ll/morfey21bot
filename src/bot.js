require('dotenv').config();
const { Telegraf } = require('telegraf');
const { data_init, getUserInfo, updateUserData, getPoolInfo, getMapInfo, getUserInfoByNick, getUserInfoByPhone, getUserInfoByUsername, delUserInfoByNick } = require('./table_api');
const { proof_keyboard, registration_keyboard, privacy_keyboard } = require('./inline_keyboards');
const { BANNED, UNREGISTERED, WRONG, REGISTERED, CONFIRMED, MODERATOR, ADMIN, OWNER } = require('./defs/roles');
const { DEFAULT, NICKNAME, PHONE, IG, STATUS, FEEDBACK } = require('./defs/input_modes');
const recognize = require('./utils/recognize');
const { formatMapData, formatMapHistory, formatClustersData } = require('./utils/mapformat'); // mapFormat
const changelog = require('./defs/changelog');

if (!process.env.OLD_MAIN || !process.env.NEW_MAIN || !process.env.NICKNAMES || !process.env.BOT_TOKEN) {
    console.error('Please setup bot .env variables.');
    process.exit();
}

const MODERATOR_IDS = process.env.MODERATORS.split(" ").map(id => +id);
const MAP_HISTORY_LENGTH = +process.env.MAP_HISTORY_LENGTH || 15;
const NICKNAMES = Object.fromEntries(process.env.NICKNAMES.split(' ').map((name) => [name, true]));
const PEERS = Object.fromEntries([...process.env.OLD_MAIN.split(' '), ...process.env.NEW_MAIN.split(' ')].map((name) => [name, true]));
const bot = new Telegraf(process.env.BOT_TOKEN);

/**
* –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ (–≤ table_api.js) –∏ –∑–∞—Ç–µ–º –Ω–∞–≤–µ—à–∏–≤–∞–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞—Ñ–∞.
*/
const bot_init = async () => {
    await data_init();

    bot.help((ctx) => user_handler(ctx, async (ctx) => {
        console.log('/help', ctx.user.id, ctx.user.first_name, ctx.user.last_name, ctx.user.username, ctx.user.nick, ctx.user.role);
        if (not_in(+ctx.user.role, [BANNED, WRONG])) {
            ctx.reply('–£ –±–æ—Ç–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–ª–æ–≤–µ–∫–µ, –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –Ω–∏–∫.\n'
                + '–¢–∞–∫–∂–µ –∏–º–µ–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ-–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –±–∞—Å—Å–µ–π–Ω–∞.\n\n'
                + (+ctx.user.role < REGISTERED ? '–û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. ' : '')
                + '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ /cmdlist');
        }
    }));

    bot.start((ctx) => user_handler(ctx, (ctx) => {
        console.log('/start', ctx.user.id, ctx.user.first_name, ctx.user.last_name, ctx.user.username, ctx.user.nick, ctx.user.role);
        bot.telegram.setMyCommands(cmds());
        if (+ctx.user.role == UNREGISTERED) {
            ctx.reply('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.', registration_keyboard(ctx.user));
        } else if (not_in(+ctx.user.role, [BANNED, WRONG])) {
            ctx.reply('–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ - /cmdlist\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ - @awesomesk1ll');
        }
    }));

    bot.action(/.*/, (ctx) => user_handler(ctx, async (ctx) => {
        const [ action, value, value2 ] = ctx.update.callback_query.data.split(':');
        console.log('/action', action, ctx.user.id, ctx.user.first_name, ctx.user.last_name, ctx.user.username, ctx.user.nick, ctx.user.role);
        let answer = '–¢–µ–ø–µ—Ä—å —ç—Ç–æ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ.';

        if (action && action === 'registration' && +ctx.user.role === UNREGISTERED) {
            await updateUserData(ctx.user.id, 'input_mode', (value === 'phone') ? PHONE : NICKNAME);
            answer = (value === 'phone') ? '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.' : '–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫ –∏–ª–∏ –ø–æ—á—Ç—É –®–∫–æ–ª—ã 21.';
            bot.telegram.editMessageReplyMarkup(ctx.user.id, ctx.update.callback_query.message.message_id, false).then(() => {
                if (value === 'phone') {
                    ctx.reply(answer, { reply_markup: { keyboard: [[{text: 'üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –∫–æ–Ω—Ç–∞–∫—Ç', request_contact: true}]] } });
                } else {
                    ctx.reply(answer);
                }
            });
        }

        if (action && action === 'proof' && (+ctx.user.role === ADMIN || +ctx.user.id === MODERATOR_IDS[0] )) {
            if (value) {
                answer = `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ${ value2 } –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. `;
                const user = await getUserInfoByNick(value2);
                await updateUserData(user.id, 'role', (MODERATOR_IDS[0] === +user.id) ? OWNER : CONFIRMED);
                bot.telegram.sendMessage(user.id, '–¢–≤–æ—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é üëç\n–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ - /cmdlist').then(() => {
                    answer += '(–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ)';
                }).catch((err) => {
                    console.log('–æ—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏', err, `–Ω–∏–∫: ${ value2 }, —é–∑–µ—Ä:`, user);
                    answer += '(–æ—à–∏–±–∫–∞)';
                });
            } else {
                answer = `–ü—Ä—É—Ñ –¥–ª—è ${ value2 } –æ—Ç–∫–ª–æ–Ω—ë–Ω.`;
            }
            bot.telegram.editMessageReplyMarkup(ctx.user.id, ctx.update.callback_query.message.message_id, false).then(() => {
                ctx.reply(answer);
            });
        }

        if (action && action === 'privacy' && +ctx.user.role >= REGISTERED) {
            let privacy = { contact: +value2[0], tg: +value2[1], ig: +value2[2] };

            if (value === 'tg') {
                if (privacy.contact) {
                    privacy = { contact: false, tg: true, ig: !!privacy.ig };
                } else if (privacy.tg) {
                    privacy = { contact: false, tg: false, ig: !!privacy.ig };
                } else {
                    privacy = { contact: true, tg: false, ig: !!privacy.ig };
                }
                await updateUserData(ctx.user.id, 'privacy', JSON.stringify(privacy));
            } else if (value === 'ig') {
                privacy = { contact: !!privacy.contact, tg: !!privacy.tg, ig: !privacy.ig}
                await updateUserData(ctx.user.id, 'privacy', JSON.stringify(privacy));
            }
            
            if (value === 'close') {
                ctx.editMessageText(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:\nTG: ${ 
                    (privacy.contact && '–ë—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç (–≤—Å—ë)') || (privacy.tg && '–ë—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ –Ω–∏–∫') || '–ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è' 
                }\nIG: –ë—É–¥–µ—Ç ${ privacy.ig ? '–ø–æ–∫–∞–∑–∞–Ω' : '—Å–∫—Ä—ã—Ç' }`);
            } else {
                ctx.editMessageReplyMarkup(privacy_keyboard(privacy, ctx.user.ig).reply_markup);
            }

            answer = (value === 'close') ? '–û–∫.' : '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω—ã.'
        }

        return ctx.answerCbQuery(answer);
    }));

    bot.on('contact', (ctx) => user_handler(ctx, async (ctx) => {
        console.log('/contact', ctx.user.first_name, ctx.user.last_name, ctx.user.username, ctx.user.nick, ctx.user.role, ctx.update.message.contact.user_id, ctx.update.message.contact.phone_number);
        if (+ctx.user.role === UNREGISTERED && +ctx.user.input_mode === PHONE) {
            if (+ctx.user.id === ctx.update.message.contact.user_id) {
                await updateUserData(ctx.update.message.from.id, 'phone', ctx.update.message.contact.phone_number);
                ctx.reply('–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.', { reply_markup: { remove_keyboard: true } }).then(async () => {
                    if (!ctx.user.nick) {
                        ctx.reply('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫ –∏–ª–∏ –ø–æ—á—Ç—É –®–∫–æ–ª—ã 21.');
                    } else {
                        await reg_handler(ctx);
                    }
                });
            } else {
                ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.');
            }
        } else if (+ctx.user.role >= REGISTERED && +ctx.user.input_mode === DEFAULT) {
            found = await getUserInfoByPhone(recognize(ctx.update.message.contact.phone_number)?.value);
            if (found) {
                let answer = '';
                const mapInfo = await getMapInfo(found?.nick || 'not_found');
                const privacy = JSON.parse(ctx.user.privacy);
                if (privacy.tg || found.status) {
                    answer += (found.nick ? found.nick : '')
                        + ((privacy.tg && found.username) ? ` (@${ found.username })` : '')
                        + (found.status ? `: ${ found.status }` : '');
                }
                if (privacy.contact && found.phone) {
                    if (found.username) {
                        answer += `\n–ò–º—è: ${ found.first_name || '' } ${ found.last_name || '' }\n–ù–æ–º–µ—Ä: +${ found.phone }`;
                    } else {
                        await bot.telegram
                        .sendContact(ctx.update.message.from.id, found.phone, `${found.first_name} ${found.last_name}${found.nick ? (' (' + found.nick + ')') : ''}`)
                        .catch((err) => {
                            answer += `\n–ò–º—è: ${ found.first_name || '' } ${ found.last_name || '' }\n–ù–æ–º–µ—Ä: +${ found.phone }`;
                            console.log('TG API unavailable for', err.response.parameters.retry_after);
                        });
                    }

                }
                if (privacy.ig && found.ig) {
                    answer += `\nIG: https://www.instagram.com/${ found.ig }/`;
                }
                if (mapInfo) {
                    if (!mapInfo.status) {
                        bot.telegram.sendMessage(MODERATOR_IDS[0], '–°–ª–æ–º–∞–ª—Å—è –ø–∞—Ä—Å–µ—Ä –∫–∞—Ä—Ç—ã, @awesomesk1ll');
                    }
                    answer += `\n\n` + formatMapData(mapInfo).format;
                }
                ctx.reply(answer || `–î–æ—Å—Ç—É–ø–Ω–∞—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ ${ input.value } –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.`);
            } else {
                await ctx.reply(`–î–æ—Å—Ç—É–ø–Ω–∞—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ ${ ctx.update.message.contact.phone_number } –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.`);
            }
        }
    }));

    bot.command('support', (ctx) => user_handler(ctx, async (ctx) => {
        if (not_in(+ctx.user.status, [BANNED, WRONG])) {
            ctx.reply('–ü–æ –ª—é–±—ã–º –ø—Ä–æ–±–ª–µ–º–∞–º —Å –±–æ—Ç–æ–º –ø–∏—à–∏ @awesomesk1ll');
        }
    }));
    
    bot.command('cmdlist', (ctx) => user_handler(ctx, async (ctx) => {
        console.log('/cmdlist', ctx.user.id, ctx.user.first_name, ctx.user.last_name, ctx.user.username, ctx.user.nick, ctx.user.role);
        if (not_in(+ctx.user.status, [BANNED, WRONG])) {
            const answer = '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n' + cmds(+ctx.user.role).map((cmd) => `/${ cmd.command } - ${ cmd.description }`).join('\n');
            ctx.reply(answer);
        }
    }));

    bot.command('changelog', (ctx) => user_handler(ctx, async (ctx) => {
        console.log('/changelog', ctx.user.id, ctx.user.first_name, ctx.user.last_name, ctx.user.username, ctx.user.nick, ctx.user.role);
        if (+ctx.user.role >= REGISTERED) {
            const answer = `–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π: \n\n${
                                changelog
                                    .slice(0, 3)
                                    .map(note => `–í–µ—Ä—Å–∏—è: ${ note.version } –æ—Ç ${ note.date }\n${
                                        note.text.map((line, index) => `${ index + 1 }. ${ line }`).join('\n')
                                    }`).join('\n\n')
                            }\n\n–ê–≤—Ç–æ—Ä: mugroot - @awesomesk1ll`;
            ctx.reply(answer);
        }
    }));

    bot.command('status', (ctx) => user_handler(ctx, async (ctx) => {
        console.log('/status', ctx.user.id, ctx.user.first_name, ctx.user.last_name, ctx.user.username, ctx.user.nick, ctx.user.role);
        if (+ctx.user.role >= REGISTERED && (ctx.message.text.trim()[0] === '/')) {
            //const info = ctx.message.text.substring(ctx.message.text.split(' ')[0].length + 1);
            await updateUserData(ctx.user.id, 'input_mode', STATUS);
            ctx.reply('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞.');
        }
    }));

    bot.command('feedback', (ctx) => user_handler(ctx, async (ctx) => {
        console.log('/feedback', ctx.user.id, ctx.user.first_name, ctx.user.last_name, ctx.user.username, ctx.user.nick, ctx.user.role);
        if (+ctx.user.role >= REGISTERED) {
            await updateUserData(ctx.user.id, 'input_mode', FEEDBACK);
            ctx.reply('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π —Ñ–∏–¥–±—ç–∫.');
        }
    }));

    bot.command('setinsta', (ctx) => user_handler(ctx, async (ctx) => {
        console.log('/setinsta', ctx.user.id, ctx.user.first_name, ctx.user.last_name, ctx.user.username, ctx.user.nick, ctx.user.role);
        if (+ctx.user.role >= REGISTERED) {
            await updateUserData(ctx.user.id, 'input_mode', IG);
            ctx.reply('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫ –∏–∑ –∏–Ω—Å—Ç—ã.');
        }
    }));

    bot.command('setprivacy', (ctx) => user_handler(ctx, async (ctx) => {
        console.log('/setprivacy', ctx.user.id, ctx.user.first_name, ctx.user.last_name, ctx.user.username, ctx.user.nick, ctx.user.role);
        if (+ctx.user.role >= REGISTERED) {
            ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:', privacy_keyboard(JSON.parse(ctx.user.privacy), ctx.user.ig));
        }
    }));

    bot.command('maphistory', (ctx) => user_handler(ctx, async (ctx) => {
        console.log('/maphistory', ctx.user.id, ctx.user.first_name, ctx.user.last_name, ctx.user.username, ctx.user.nick, ctx.user.role);
        if (+ctx.user.role >= REGISTERED) {
            let nick = ctx.message.text.substring(ctx.message.text.split(' ')[0].length + 1).split(/\s|@/)[0].toLowerCase() || ctx.user.nick;
            if (+ctx.user.role < ADMIN) {
                nick = ctx.user.nick;
            }
            const mapInfo = PEERS[nick] ? await getMapInfo( nick ) : false;

            let text = formatMapHistory(mapInfo, MAP_HISTORY_LENGTH);
            if (+ctx.user.role >= ADMIN) {
                text = `${ nick } - ` + text;
            }
            ctx.reply(text);
        }
    }));

    bot.command('campus', (ctx) => user_handler(ctx, async (ctx) => {
        console.log('/campus', ctx.user.id, ctx.user.first_name, ctx.user.last_name, ctx.user.username, ctx.user.nick, ctx.user.role);
        if (+ctx.user.role >= REGISTERED) {
            // const mapInfo = await getMapInfo( 'mugroot' );
            let text = formatClustersData();
            ctx.replyWithHTML(text);
        }
    }));

    bot.command('poolinfo', (ctx) => user_handler(ctx, async (ctx) => {
        if (+ctx.user.role >= CONFIRMED) {
            let nick = ctx.message.text.substring(ctx.message.text.split(' ')[0].length + 1).split(/\s|@/)[0].toLowerCase() || ctx.user.nick;
            if (+ctx.user.role < ADMIN) {
                nick = ctx.user.nick;
            }
            const info = await getPoolInfo( nick );
            console.log('/poolinfo', `${ctx.user.username} ${ctx.user.first_name} ${ctx.user.last_name} -> ${ nick }`, !!info);
            if (info) {
                const answer = `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –±–∞—Å—Å–µ–π–Ω–∞:\n\n`
                    + `–ù–∏–∫: ${info.name} - ${info.month}\n`
                    + `–û–ø—ã—Ç: ${ info.proj_exp } (${info.proj_exp_place} –º–µ—Å—Ç–æ)\n`
                    + `–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${ info.completed } (${info.completed_place} –º–µ—Å—Ç–æ)\n`
                    + `–ü—Ä–æ–≤–µ—Ä–æ–∫: ${ info.checks } (${info.checks_place} –º–µ—Å—Ç–æ)\n`
                    + (info.tribe ? `–¢—Ä–∞–π–±: ${ info.tribe } (${info.tribe_pos} –º–µ—Å—Ç–æ - ${ info.tribe_exp } –æ–ø—ã—Ç–∞)\n` : '')
                    + '\n–û—Ç–∑—ã–≤—ã –æ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö:\n'
                        + ` - –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å - ${ info.interested }\n`
                        + ` - –¥–æ–±—Ä–æ—Ç–∞ - ${ info.nice }\n`
                        + ` - –ø—É–Ω–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å - ${ info.punctual }\n`
                        + ` - —Ç—â–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å - ${ info.rigorous }\n\n`
                    + '–£–º–µ–Ω–∏—è:\n'
                        + ` - –∞–ª–≥–æ—Ä–∏—Ç–º—ã: ${info.Algorithms}\n`
                        + ` - –ª–∏–Ω—É–∫—Å: ${info.Linux}\n`
                        + ` - —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: ${info['Structured programming']}\n`
                        + ` - —Ç–∏–ø—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö: ${info['Types and data structures']}\n`
                        + ` - –ª–∏–¥–µ—Ä—Å—Ç–≤–æ: ${info.Leadership}\n`
                        + ` - —è–∑—ã–∫ C: ${info['–°']}\n`
                        + ` - Shell/Bash: ${info['Shell/Bash']}\n`
                        + ` - —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ: ${info['Team work']}\n`
                        + ` - –ë–î –∏ –¥–∞–Ω–Ω—ã–µ: ${info['DB & Data']}\n`;
                ctx.reply(answer).then(() => {
                    if (+ctx.user.role < ADMIN) {
                        ctx.reply('–ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–º–µ–µ—Ç—Å—è –æ—à–∏–±–∫–∞ - –ø–∏—à–∏ –≤ —Å—É–ø–ø–æ—Ä—Ç. @awesomesk1ll');
                    }
                });
            } else {
                ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –±–∞—Å—Å–µ–π–Ω—É. –ü–∏—à–∏ @awesomesk1ll.');
            }
        }
    }));

    bot.command('delete', (ctx) => user_handler(ctx, async (ctx) => {
        if (+ctx.user.role >= OWNER || +ctx.user.id === MODERATOR_IDS[0]) {
            const nick = ctx.message.text.substring(ctx.message.text.split(' ')[0].length + 1).split(/\s|@/)[0].toLowerCase() || "";
            if (nick) {
                if (NICKNAMES[nick] || PEERS[nick]) {
                    const data = await getUserInfoByNick(nick);
                    console.log('/delete', `${ctx.user.username} ${ctx.user.first_name} ${ctx.user.last_name} ${ctx.user.nick} -> ${nick} (${ data ? 'found': 'not found'})`);
                    if (data) {
                        const res = await delUserInfoByNick(nick);
                        ctx.reply(`–Æ–∑–µ—Ä ${ nick }${ res ? '' : ' –Ω–µ' } —É–¥–∞–ª—ë–Ω.`);
                    } else {
                        await ctx.reply(`–Æ–∑–µ—Ä ${ nick } –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
                    }
                } else {
                    ctx.reply(`–û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–∏–∫.`);
                }
            } else {
                ctx.reply(`–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–∏–∫.`);
            }
        } else {
            ctx.reply(`–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.`);
        }
    }));

    bot.command('setrole', (ctx) => user_handler(ctx, async (ctx) => {
        if (+ctx.user.role >= OWNER || +ctx.user.id === MODERATOR_IDS[0]) {
            const nick = ctx.message.text.substring(ctx.message.text.split(' ')[0].length + 1).split(/\s|@/)[0].toLowerCase() || "";
            const role = +ctx.message.text.substring(ctx.message.text.length-2) || 0;
            if (nick) {
                if (NICKNAMES[nick] || PEERS[nick]) {
                    const found = await getUserInfoByNick(nick);
                    console.log('/setrole', `${ctx.user.username} ${ctx.user.first_name} ${ctx.user.last_name} ${ctx.user.nick} -> ${nick} (${ found ? 'found': 'not found'})`);
                    if (found) {
                        await updateUserData(found.id, 'role', role);
                        ctx.reply(`–Æ–∑–µ—Ä ${ nick } ${ role ? '–ø–æ–ª—É—á–∏–ª –Ω–æ–≤—É—é —Ä–æ–ª—å' : '–∑–∞–±–∞–Ω–µ–Ω' } (${role}).`);
                    } else {
                        await ctx.reply(`–Æ–∑–µ—Ä ${ nick } –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
                    }
                } else {
                    ctx.reply(`–û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–∏–∫.`);
                }
            } else {
                ctx.reply(`–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–∏–∫.`);
            }
        } else {
            ctx.reply(`–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.`);
        }
    }));

    bot.command('reload', (ctx) => user_handler(ctx, async (ctx) => {
        console.log('/reload', ctx.user.id, ctx.user.first_name, ctx.user.last_name, ctx.user.username, ctx.user.nick, ctx.user.role);
        if (+ctx.user.role >= OWNER || +ctx.user.id === MODERATOR_IDS[0]) {
            await data_init();
            ctx.reply(`–°–¥–µ–ª–∞–Ω–æ.`);
        } else {
            ctx.reply(`–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.`);
        }
    }));

    bot.on('text', (ctx) => user_handler(ctx, async (ctx) => {
        bot.telegram.setMyCommands(cmds());
        console.log('/text', ctx.user.id, ctx.user.first_name, ctx.user.last_name, ctx.user.username, ctx.user.nick, ctx.user.role);

        if (not_in(+ctx.user.role, [BANNED, WRONG])) {
            if (+ctx.user.role === UNREGISTERED && +ctx.user.input_mode === NICKNAME) {
                const input = recognize(ctx.message.text);
                if (input && (input.type === 'mail' || input.type === 'nick')) {
                    if (NICKNAMES[input.value] || PEERS[input.value]) {
                        await updateUserData(ctx.update.message.from.id, 'nick', input.value);
                        if (+ctx.user.role == WRONG) {
                            ctx.reply('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∏–∫–∞: –æ–±—Ä–∞—Ç–∏—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.').then(() => {
                                bot.telegram.sendContact(ctx.update.message.from.id, '79639449443', '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞');
                            });
                        } else {
                            ctx.reply('–ù–∏–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.').then(async () => {
                                if (ctx.user.input_mode === PHONE) {
                                    ctx.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.', { reply_markup: { keyboard: [[{text: 'üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –∫–æ–Ω—Ç–∞–∫—Ç', request_contact: true}]] } })
                                } else {
                                    await reg_handler(ctx);
                                }
                            });
                        }
                    } else {
                        ctx.reply(`–û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–∏–∫.`);
                    }
                } else {
                    ctx.reply(`–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.`);
                }

            } else if (+ctx.user.role >= REGISTERED && +ctx.user.input_mode === DEFAULT) {
                const input = recognize(ctx.message.text);
                let found, answer = '';
                if (input) {
                    if (input.type === 'cluster') {
                        // const mapInfo = await getMapInfo( 'mugroot' );
                        found = input.value;
                        answer = formatClustersData(false, found);
                    } else if (input.type === 'mail' || input.type === 'nick') {
                        if (NICKNAMES[input.value] || PEERS[input.value]) {
                            found = await getUserInfoByNick(input.value);
                        } else {
                            answer = '–£–∫–∞–∑–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–∏–∫.';
                        }
                    } else if (input.type === 'phone') {
                        found = await getUserInfoByPhone(input.value);
                    } else if (input.type === 'username') {
                        found = await getUserInfoByUsername(input.value);
                    }

                    if (found || PEERS[input.value]) {
                        if (input.type !== 'cluster') {
                            const mapInfo = await getMapInfo(found?.nick || input.value);
                            const privacy = found?.privacy ? JSON.parse(found.privacy) : false;
                            if (privacy.tg || found.status) {
                                answer += (found.nick ? found.nick : '')
                                    + ((privacy.tg && found.username) ? ` (@${ found.username })` : '')
                                    + (found.status ? `: ${ found.status }` : '');
                            }
                            if (privacy.contact && found.phone) {
                                if (found.username) {
                                    answer += `\n–ò–º—è: ${ found.first_name || '' } ${ found.last_name || '' }\n–ù–æ–º–µ—Ä: +${ found.phone }`;
                                } else {
                                    await bot.telegram
                                    .sendContact(ctx.update.message.from.id, found.phone, `${found.first_name} ${found.last_name}${found.nick ? (' (' + found.nick + ')') : ''}`)
                                    .catch((err) => {
                                        answer += `\n–ò–º—è: ${ found.first_name || '' } ${ found.last_name || '' }\n–ù–æ–º–µ—Ä: +${ found.phone }`;
                                        console.log('TG API unavailable for', err.response.parameters.retry_after);
                                    });
                                }
    
                            }
                            if (privacy.ig && found.ig) {
                                answer += `\nIG: https://www.instagram.com/${ found.ig }/`;
                            }
                            if (mapInfo) {
                                if (!mapInfo.status) {
                                    bot.telegram.sendMessage(MODERATOR_IDS[0], '–°–ª–æ–º–∞–ª—Å—è –ø–∞—Ä—Å–µ—Ä –∫–∞—Ä—Ç—ã, @awesomesk1ll');
                                }
                                answer += `\n\n` + formatMapData(mapInfo).format;
                            }
                        }
                        if (!answer) {
                            answer = `–î–æ—Å—Ç—É–ø–Ω–∞—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ ${ input.value } –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.`;
                        }
                        ctx.replyWithHTML(answer);
                    } else {
                        await ctx.reply(answer || `–î–æ—Å—Ç—É–ø–Ω–∞—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ ${ input.value } –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.`);
                    }

                } else {
                    ctx.reply(`–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.`);
                }

            } else if (+ctx.user.role >= REGISTERED && +ctx.user.input_mode === IG) {
                const input = recognize(ctx.message.text);
                if (input && input.type === 'username') {
                    await updateUserData(ctx.update.message.from.id, 'ig', input.value);
                    ctx.reply(`–ù–∏–∫ –∏–Ω—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.`);
                } else {
                    ctx.reply(`–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏ –≤–∞–ª–∏–¥–Ω—ã–π @–∏–Ω—Å—Ç–∞_—é–∑–µ—Ä–Ω–µ–π–º!.`);
                }

            } else if (+ctx.user.role >= REGISTERED && +ctx.user.input_mode === STATUS) {
                const input = ctx.message.text.trim();
                if (input) {
                    await updateUserData(ctx.update.message.from.id, 'status', input);
                    ctx.reply(`–°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`);
                } else {
                    ctx.reply(`–û—à–∏–±–∫–∞: –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞.`);
                }

            } else if (+ctx.user.role >= REGISTERED && +ctx.user.input_mode === FEEDBACK) {
                const input = ctx.message.text.trim();
                if (input) {
                    await updateUserData(ctx.update.message.from.id, 'feedback', ctx.user.feedback ? `${ctx.user.feedback}|${input}` : input );
                    ctx.reply(`–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!`);
                } else {
                    ctx.reply(`–û—à–∏–±–∫–∞: –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–∏–¥–±—ç–∫–∞.`);
                }

            }
        }
    }));

    bot.launch();
}

bot_init();

/**
* –ù–∏–∂–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏ –ø—Ä–æ—á–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
*/
function cmds(role) {
    cmdlist = [
        { command: 'start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
        { command: 'help', description: '–ò–Ω—Ñ–∞ –æ –±–æ—Ç–µ' },
        { command: 'cmdlist', description: '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥' },
        { command: 'support', description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞' },
    ];
    if (role >= REGISTERED) {
        cmdlist.push({ command: 'campus', description: '–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–º–ø—É—Å–∞' });
        cmdlist.push({ command: 'maphistory', description: '–í—ã–≤–µ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–π –≤ –∫–∞–º–ø—É—Å–µ' });
        cmdlist.push({ command: 'setinsta', description: '–£–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç–∞–≥—Ä–∞–º' });
        cmdlist.push({ command: 'setprivacy', description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö' });
        cmdlist.push({ command: 'status', description: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ' });
        cmdlist.push({ command: 'feedback', description: '–û—Å—Ç–∞–≤–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ / –æ—Ç–∑—ã–≤ / –±–∞–≥—Ä–µ–ø–æ—Ä—Ç' });
        cmdlist.push({ command: 'changelog', description: '–£–∑–Ω–∞—Ç—å, —á—Ç–æ –Ω–æ–≤–æ–≥–æ —É –ú–æ—Ä—Ñ–µ—è' });
    }
    if (role >= CONFIRMED) {
        cmdlist.push({ command: 'poolinfo', description: '–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ—É –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é –±–∞—Å—Å–µ–π–Ω–∞' });
    }
    if (role >= OWNER) {
        cmdlist.push({ command: 'delete', description: '–£–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ' });
        cmdlist.push({ command: 'setrole', description: '–ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
        cmdlist.push({ command: 'reload', description: '–†–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è' });
    }
    return cmdlist;
}

function not_in(val, arr) {
    return !arr.includes(val);
}

async function user_handler(ctx, func) {
    if (ctx.chat.type === 'private') {
        ctx.user = await getUserInfo( ctx.update.message?.from || ctx.update.callback_query.from ); // business data enrichment against boilerplating
        return await func(ctx);
    }
}

async function reg_handler(ctx) {
    const msg = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã (–¥–æ—Å—Ç—É–ø–Ω—ã–µ - /cmdlist).\n\n'
            + '–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–∏—Ä–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ –Ω–∏–∫, —Ç–≥ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.';
    await updateUserData(ctx.user.id, 'role', REGISTERED);
    ctx.reply(msg);
    const text = '–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.\n\n'
            + (ctx.user.first_name ? `–ò–º—è: ${ ctx.user.first_name }\n` : '')
            + (ctx.user.last_name ? `–§–∞–º–∏–ª–∏—è: ${ ctx.user.last_name }\n` : '')
            + (ctx.user.username ? `TG: @${ ctx.user.username }\n` : '')
            + (ctx.user.nick ? `–ù–∏–∫: ${ ctx.user.nick }\n` : '')
            + (ctx.user.phone ? `–¢–§: ${ ctx.user.phone }\n` : '');
    bot.telegram.sendMessage(MODERATOR_IDS[0], text, proof_keyboard([ctx.user.nick])).then(() => {
        bot.telegram.sendContact(MODERATOR_IDS[0], ctx.user.phone, `${ctx.user.first_name} ${ctx.user.last_name}`);
    });
}
